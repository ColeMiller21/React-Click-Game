{"version":3,"sources":["components/Header/Header.js","components/Banner/Banner.js","components/Wrapper/Wrapper.js","components/ImageDiv/Image.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Container","fluid","className","Row","Col","id","counter","highScore","Banner","Wrapper","children","Image","src","image","alt","key","onClick","App","state","images","pickedImages","playGame","includes","gameOver","setState","arrShuffle","push","console","log","forEach","beenClicked","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kkmJAkBeA,MAXf,SAAgBC,GACZ,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,oBACvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAM,wBAAIC,GAAG,OAAOH,UAAU,oBAAxB,eACN,kBAACE,EAAA,EAAD,KAAK,wBAAIC,GAAG,SAASH,UAAU,oBAA1B,UAAqDH,EAAMO,QAA3D,kBAAmFP,EAAMQ,UAAzF,S,MCSNC,MAhBf,WACI,OACI,kBAACR,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACE,EAAA,EAAD,KACI,yBAAKE,GAAG,cACJ,yBAAKH,UAAU,wBACX,wBAAIA,UAAU,SAAd,mBACA,6G,MCETO,MAVf,SAAiBV,GACb,OACI,kBAACC,EAAA,EAAD,CAAWE,UAAU,YAAYH,EAAMW,W,MCUhCC,MAXf,SAAeZ,GACX,OACI,yBAAKG,UAAU,WACX,yBAAKG,GAAG,aAAaO,IAAKb,EAAMc,MAAOC,IAAI,kBAAkBC,IAAKhB,EAAMgB,IAAKC,QAASjB,EAAMiB,Y,QCwFzFC,G,iNAnFbC,MAAQ,CACNC,SACAC,aAAc,GACdd,QAAS,EACTC,UAAW,G,EAGbc,SAAW,SAAAN,IAEqC,IAA1C,EAAKG,MAAME,aAAaE,SAASP,IAAwC,KAAvB,EAAKG,MAAMZ,SAC/D,EAAKiB,WACL,EAAKC,SAAS,CAAEJ,aAAc,OAI9B,EAAKI,SAAS,CAAElB,QAAS,EAAKY,MAAMZ,QAAU,IAE9C,EAAKmB,WAAW,EAAKP,MAAMC,QAE3B,EAAKD,MAAME,aAAaM,KAAKX,GAE7BY,QAAQC,IAAI,EAAKV,MAAME,gB,EAM3BG,SAAW,WAEL,EAAKL,MAAMZ,QAAU,EAAKY,MAAMX,UAClC,EAAKiB,SAAS,CAAEjB,UAAW,EAAKW,MAAMZ,QAASA,QAAS,KAIxD,EAAKY,MAAMC,OAAOU,SAAQ,SAAAhB,GAAK,OAAIA,EAAMiB,aAAc,KACvD,EAAKN,SAAS,CAAElB,QAAS,M,EAM7BmB,WAAa,SAAAM,GAIX,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAElB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,G,wEAGC,IAAD,OACP,OACE,6BACE,kBAAC/B,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAD,CACEG,QAASiC,KAAKrB,MAAMZ,QACpBC,UAAWgC,KAAKrB,MAAMX,aAE1B,kBAACJ,EAAA,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,KACGoC,KAAKrB,MAAMC,OAAOqB,KAAI,SAAA3B,GAAK,OAC1B,kBAAC,EAAD,CACEE,IAAKF,EAAME,IACXF,MAAOA,EAAMA,MACbG,QAAS,kBAAM,EAAKK,SAASR,EAAME,kB,GA5EjC0B,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7a40980f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport \"./style.css\"\r\n\r\n\r\n\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <Container fluid className=\"header fixed-top\">\r\n            <Row>\r\n                <Col ><h3 id=\"logo\" className=\"text-center text\">NFL Click!</h3></Col>\r\n                <Col><h3 id=\"scores\" className=\"text-center text\">Score: {props.counter} |  Top Score: {props.highScore} </h3></Col>\r\n            </Row>\r\n        </ Container>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { Container, Row } from \"reactstrap\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Banner() {\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <div id=\"banner-img\">\r\n                    <div className=\"img-text text-center\">\r\n                        <h1 className=\"title\">NFL Click Game!</h1>\r\n                        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n                    </div>\r\n                </div>\r\n\r\n            </Row>\r\n        </ Container>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <Container className=\"img-area\">{props.children}</Container>\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nfunction Image(props) {\r\n    return (\r\n        <div className=\"img-div\">\r\n            <img id=\"team-image\" src={props.image} alt=\"nfl-logo-images\" key={props.key} onClick={props.onClick} />\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react';\nimport { Container, Row } from \"reactstrap\";\nimport Header from \"./components/Header/Header\";\nimport Banner from \"./components/Banner/Banner\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Image from \"./components/ImageDiv/Image\";\nimport images from \"./images.json\"\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  state = {\n    images,\n    pickedImages: [],\n    counter: 0,\n    highScore: 0\n  }\n\n  playGame = key => {\n    // if pickedImages includes the image key ending game emptying out the pickedImages array\n    if (this.state.pickedImages.includes(key) === true || this.state.counter === 12) {\n      this.gameOver();\n      this.setState({ pickedImages: [] })\n    }\n    else {\n      // setting the coutner + 1 everytime a number is clicked\n      this.setState({ counter: this.state.counter + 1 });\n      // shuffling the images array after click\n      this.arrShuffle(this.state.images)\n      // pushing the image key into pickedImages array\n      this.state.pickedImages.push(key);\n\n      console.log(this.state.pickedImages)\n    }\n\n  }\n\n  //functin to reset the game\n  gameOver = () => {\n    // if the counter is higher than highScore setting highScore equal to counter\n    if (this.state.counter > this.state.highScore) {\n      this.setState({ highScore: this.state.counter, counter: 0 })\n    }\n    else {\n      // looping over all images and making beenClicked equal to false \n      this.state.images.forEach(image => image.beenClicked = false)\n      this.setState({ counter: 0 })\n    }\n  }\n\n\n  // Function that shuffles an array\n  arrShuffle = array => {\n    // This is for shuffling the false questions chosen\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  render() {\n    return (\n      <div>\n        <Container fluid>\n          <Row>\n            <Header\n              counter={this.state.counter}\n              highScore={this.state.highScore} />\n          </Row>\n          <Row>\n            <Banner />\n          </Row>\n          <Wrapper>\n            {this.state.images.map(image =>\n              <Image\n                key={image.key}\n                image={image.image}\n                onClick={() => this.playGame(image.key)} />\n            )}\n          </Wrapper>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}